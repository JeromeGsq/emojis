import type { Emoji } from './types';
import rawEmojiData from '../public/emoji-data.json';

// Les emojis couramment utilis√©s dans les commits Git
const gitmojiChars = [
  'üé®', // :art: Am√©liorer la structure/format du code
  '‚ö°Ô∏è', // :zap: Am√©liorer les performances
  'üî•', // :fire: Supprimer du code ou des fichiers
  'üêõ', // :bug: Corriger un bug
  'üöëÔ∏è', // :ambulance: Correction critique
  '‚ú®', // :sparkles: Introduire de nouvelles fonctionnalit√©s
  'üìù', // :memo: Ajouter ou mettre √† jour la documentation
  'üöÄ', // :rocket: D√©ploiement
  'üíÑ', // :lipstick: Ajouter ou mettre √† jour l'UI et le style
  'üéâ', // :tada: Commencer un projet
  '‚úÖ', // :white_check_mark: Ajouter, mettre √† jour ou passer des tests
  'üîíÔ∏è', // :lock: R√©soudre des probl√®mes de s√©curit√©
  'üîñ', // :bookmark: Tags de version/release
  'üö®', // :rotating_light: Corriger les avertissements du compilateur/linter
  'üöß', // :construction: Travail en cours
  'üíö', // :green_heart: Corriger les builds CI
  '‚¨áÔ∏è', // :arrow_down: Downgrade de d√©pendances
  '‚¨ÜÔ∏è', // :arrow_up: Upgrade de d√©pendances
  'üìå', // :pushpin: √âpingler des d√©pendances √† des versions sp√©cifiques
  'üë∑', // :construction_worker: Ajouter ou mettre √† jour le syst√®me de CI
  'üìà', // :chart_with_upwards_trend: Ajouter ou mettre √† jour des analyses ou du tracking
  '‚ôªÔ∏è', // :recycle: Refactoriser du code
  '‚ûï', // :heavy_plus_sign: Ajouter une d√©pendance
  '‚ûñ', // :heavy_minus_sign: Supprimer une d√©pendance
  'üîß', // :wrench: Ajouter ou mettre √† jour des fichiers de configuration
  'üî®', // :hammer: Ajouter ou mettre √† jour des scripts de d√©veloppement
  'üåê', // :globe_with_meridians: Internationalisation et localisation
  '‚úèÔ∏è', // :pencil2: Corriger des fautes de frappe
  'üí©', // :poop: Am√©liorer du code d√©ficient
  '‚è™Ô∏è', // :rewind: Revenir √† une version pr√©c√©dente
  'üîÄ', // :twisted_rightwards_arrows: Fusionner des branches
  'üì¶Ô∏è', // :package: Ajouter ou mettre √† jour des assets compil√©s ou des packages
  'üëΩÔ∏è', // :alien: Mettre √† jour du code suite √† des API externes
  'üöö', // :truck: D√©placer ou renommer des ressources
  'üìÑ', // :page_facing_up: Ajouter ou mettre √† jour une licence
  'üí•', // :boom: Introduire des changements majeurs
  'üç±', // :bento: Ajouter ou mettre √† jour des assets
  '‚ôøÔ∏è', // :wheelchair: Am√©liorer l'accessibilit√©
  'üí°', // :bulb: Ajouter ou mettre √† jour des commentaires
  'üçª', // :beers: √âcrire du code sous l'influence
  'üí¨', // :speech_balloon: Ajouter ou mettre √† jour du texte ou des lit√©raux
  'üóÉÔ∏è', // :card_file_box: Faire des changements li√©s √† la base de donn√©es
  'üîä', // :loud_sound: Ajouter ou mettre √† jour des logs
  'üîá', // :mute: Supprimer des logs
  'üë•', // :busts_in_silhouette: Ajouter ou mettre √† jour des contributeurs
  'üö∏', // :children_crossing: Am√©liorer l'exp√©rience utilisateur
  'üèóÔ∏è', // :building_construction: Apporter des changements architecturaux
  'üì±', // :iphone: Travailler sur le design responsive
  'ü§°', // :clown_face: Mocking
  'ü•ö', // :egg: Ajouter un easter egg
  'üôà', // :see_no_evil: Ajouter ou mettre √† jour un .gitignore
  'üì∏', // :camera_flash: Ajouter ou mettre √† jour des snapshots
  '‚öóÔ∏è', // :alembic: R√©aliser des exp√©rimentations
  'üîçÔ∏è', // :mag: Am√©liorer le SEO
  'üè∑Ô∏è', // :label: Ajouter ou mettre √† jour des types
  'üå±', // :seedling: Ajouter ou mettre √† jour du code de d√©marrage/config
  'üö©', // :triangular_flag_on_post: Ajouter, mettre √† jour ou supprimer des feature flags
  'ü•Ö', // :goal_net: Capturer des exceptions
  'üí´', // :dizzy: Ajouter ou mettre √† jour des animations et transitions
  'üóëÔ∏è', // :wastebasket: D√©pr√©cier du code qui a besoin d'√™tre nettoy√©
];

// Function to transform the complex nested JSON structure into a flat array of Emoji objects
function transformEmojiData(): Emoji[] {
  const result: Emoji[] = [];
  let id = 1;

  // Cr√©er les emojis standard √† partir du JSON
  const emojisByCategory = rawEmojiData.emojis;

  // Iterate through all main categories
  Object.entries(emojisByCategory).forEach(([mainCategory, subCategories]) => {
    // Iterate through all subcategories
    Object.entries(subCategories as Record<string, any[]>).forEach(
      ([subCategory, emojis]) => {
        // Iterate through all emojis in this subcategory
        emojis.forEach((emoji: any) => {
          // Keywords
          const keywords = [
            mainCategory.toLowerCase(),
            subCategory.toLowerCase(),
            ...emoji.name.split(' '),
          ];

          // V√©rifier si c'est un gitmoji
          const isGitmoji = gitmojiChars.includes(emoji.emoji);

          // Ajouter des mots-cl√©s sp√©cifiques pour les gitmojis
          if (isGitmoji) {
            keywords.push('gitmoji', 'git', 'commit', 'version control');
          }

          result.push({
            id: String(id++),
            char: emoji.emoji,
            name: emoji.name,
            // Utiliser la cat√©gorie "gitmoji" si c'est un gitmoji
            category: isGitmoji ? 'gitmoji' : subCategory,
            keywords: keywords,
          });
        });
      }
    );
  });

  return result;
}

// Transform the raw data into the format our application needs
export const emojiData: Emoji[] = transformEmojiData();
